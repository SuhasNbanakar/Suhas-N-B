package com.xworkz.details;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.function.Predicate;
import java.util.stream.Collectors;

public class DetailsBoot {

	public static void main(String[] args) {

		List<String> country = new ArrayList<String>();
		country.add("India");
		country.add("Afghanistan");
		country.add("Albania");
		country.add("Algeria");
		country.add("Andorra");
		country.add("Angola");
		country.add("Antigua and Barbuda	");
		country.add("Argentina");
		country.add("Armenia");
		country.add("Australia");
		country.add("Austria");
		country.add("Azerbaijan");
		country.add("Bahamas");
		country.add("Bahrain");
		country.add("Bangladesh");
		country.add("Barbados");
		country.add("Belarus");
		country.add("Belgium");
		country.add("Belize");
		country.add("Benin");
		country.add("Bhutan");
		country.add("Bolivia");
		country.add("Bosnia and Herzegovina	");
		country.add("Botswana");
		country.add("Brazil");
		country.add("Brunei");
		country.add("Bulgaria");
		country.add("Burkina Faso	");
		country.add("Burundi");
		country.add("Côte d'Ivoire	");
		country.add("Cabo Verde	");
		country.add("Cambodia");
		country.add("Cameroon");
		country.add("Canada");
		country.add("Central African Republic	");
		country.add("Chad");
		country.add("Chile");
		country.add("China");
		country.add("Colombia");
		country.add("Comoros");
		country.add("Congo-Brazzaville");
		country.add("Costa Rica	");
		country.add("Croatia");
		country.add("Cuba");
		country.add("Cyprus");
		country.add("Czech Republic");
		country.add("Democratic Republic of the Congo	");
		country.add("Denmark");
		country.add("Djibouti");
		country.add("Dominica");
		country.add("Dominican Republic	");
		country.add("Ecuador");
		country.add("Egypt");
		country.add("El Salvador	");
		country.add("Equatorial Guinea	");
		country.add("Eritrea");
		country.add("Estonia");
		country.add("Eswatini or Swaziland");
		country.add("Ethiopia");
		country.add("Fiji");
		country.add("Finland");
		country.add("France");
		country.add("Gabon");
		country.add("Gambia");
		country.add("Georgia");
		country.add("Germany");
		country.add("Ghana");
		country.add("Greece");
		country.add("Grenada");
		country.add("Guatemala");
		country.add("Guinea");
		country.add("Guinea-Bissau	");
		country.add("Guyana");
		country.add("Haiti");
		country.add("Holy See	");
		country.add("Honduras");
		country.add("Hungary");
		country.add("Iceland");
		country.add("Indonesia");
		country.add("Iran");
		country.add("Iraq");
		country.add("Ireland");
		country.add("Israel");
		country.add("Italy");
		country.add("Jamaica");
		country.add("Japan");
		country.add("Jordan");
		country.add("Kazakhstan");
		country.add("Kenya");
		country.add("Kiribati");
		country.add("Kuwait");
		country.add("Kyrgyzstan");
		country.add("Laos");
		country.add("Latvia");
		country.add("Lebanon");
		country.add("Lesotho");
		country.add("Liberia");
		country.add("Libya");
		country.add("Liechtenstein");
		country.add("Lithuania");
		country.add("Luxembourg");
		country.add("Madagascar");
		country.add("Malawi");
		country.add("Malaysia");
		country.add("Maldives");
		country.add("Mali");
		country.add("Malta");
		country.add("Marshall Islands	");
		country.add("Mauritania");
		country.add("Mauritius");
		country.add("Mexico");
		country.add("Micronesia");
		country.add("Moldova");
		country.add("Monaco");
		country.add("Mongolia");
		country.add("Montenegro");
		country.add("Morocco");
		country.add("Mozambique");
		country.add("Myanmar");
		country.add("Namibia");
		country.add("Nauru");
		country.add("Nepal");
		country.add("Netherlands");
		country.add("New Zealand	");
		country.add("Nicaragua");
		country.add("Niger");
		country.add("Nigeria");
		country.add("North Korea	");
		country.add("North Macedonia	");
		country.add("Norway");
		country.add("Oman");
		country.add("Pakistan");
		country.add("Palau");
		country.add("Palestine State	");
		country.add("Panama	");
		country.add("Papua New Guinea	");
		country.add("Paraguay");
		country.add("Peru");
		country.add("Philippines");
		country.add("Poland");
		country.add("Portugal");
		country.add("Qatar");
		country.add("Romania");
		country.add("Russia");
		country.add("Rwanda");
		country.add("Saint Kitts and Nevis	");
		country.add("Saint Lucia	");
		country.add("Saint Vincent and the Grenadines	");
		country.add("Samoa");
		country.add("San Marino	");
		country.add("Sao Tome and Principe	");
		country.add("Saudi Arabia	");
		country.add("Senegal");
		country.add("Serbia ");
		country.add("Seychelles");
		country.add("Sierra Leone	");
		country.add("Singapore");
		country.add("Slovakia");
		country.add("Solomon Islands	");
		country.add("Slovenia");
		country.add("Somalia");
		country.add("South Africa	");
		country.add("South Korea	");
		country.add("South Sudan	");
		country.add("Spain");
		country.add("Sri Lanka	");
		country.add("Sudan");
		country.add("Suriname");
		country.add("Sweden");
		country.add("Switzerland");
		country.add("Syria");
		country.add("Tajikistan");
		country.add("Tanzania");
		country.add("Thailand");
		country.add("Timor-Leste	");
		country.add("Togo");
		country.add("Tonga");
		country.add("Trinidad and Tobago	");
		country.add("Tunisia");
		country.add("Turkey");
		country.add("Turkmenistan");
		country.add("Tuvalu");
		country.add("Uganda");
		country.add("Ukraine");
		country.add("United Arab Emirates	");
		country.add("United Kingdom	");
		country.add("United States of America	");
		country.add("Uruguay");
		country.add("Uzbekistan");
		country.add("Vanuatu");
		country.add("Venezuela");
		country.add("Vietnam");
		country.add("Yemen");
		country.add("Zambia");
		country.add("Zimbabwe");

		List<String> primeMinister = new ArrayList<String>();
		primeMinister.add("Jawahar Lal Nehru");
		primeMinister.add("Gulzarilal Nanda");
		primeMinister.add("Lal Bahadur Shastri");
		primeMinister.add("Gulzari Lal Nanda ");
		primeMinister.add("Indira Gandhi");
		primeMinister.add("Morarji Desai");
		primeMinister.add("Charan Singh");
		primeMinister.add("Rajiv Gandhi");
		primeMinister.add("V. P. Singh");
		primeMinister.add("Chandra Shekhar");
		primeMinister.add("P. V. Narasimha Rao");
		primeMinister.add("Atal Bihari Vajpayee");
		primeMinister.add("H. D. Deve Gowda");
		primeMinister.add("Inder Kumar Gujral");
		primeMinister.add("Manmohan Singh");
		primeMinister.add("Narendra Modi");

		List<String> actors = new ArrayList<String>();
		actors.add("Vikram");
		actors.add("Suriya");
		actors.add("Joseph Vijay");
		actors.add("Allu Arjun");
		actors.add("Prabhas");
		actors.add("Vijay Sethupathi");
		actors.add("Mahesh Babu");
		actors.add("Ambareesh");
		actors.add("Anandaraj");
		actors.add("Ramesh Aravind");
		actors.add("Adithya Menon");
		actors.add("Jagapathi Babu");
		actors.add("Ravi Babu");
		actors.add("S. P. Balasubrahmanyam");
		actors.add("Kumar Bangarappa");
		actors.add("Jolly Bastian");
		actors.add("Chikkanna");
		actors.add("Darshan");
		actors.add("Sameer Dattani");
		actors.add("Kanal Kannan");
		actors.add("Kishan Shrikanth");
		actors.add("Srinagar Kitty");
		actors.add("Sadhu Kokila");
		actors.add("Komal");
		actors.add("Nagaraj Kote");
		actors.add("Shashidhar Kote");
		actors.add("Ganesh ");
		actors.add("Gangadhar");
		actors.add("Ajay Ghosh");
		actors.add("Dheerendra Gopal");
		actors.add("Gurukiran");

		List<String> rcbPlayers = new ArrayList<String>();
		rcbPlayers.add("Virat Kohli");
		rcbPlayers.add("Glenn Maxwell");
		rcbPlayers.add("Mohammad Siraj");
		rcbPlayers.add("Faf Du Plessis");
		rcbPlayers.add("Harshal Patel");
		rcbPlayers.add("Wanindu Hasaranga");
		rcbPlayers.add("Dinesh Karthik");
		rcbPlayers.add("Shahbaz Ahmed");
		rcbPlayers.add("Anuj Rawat");
		rcbPlayers.add("Akash Deep");
		rcbPlayers.add("Josh Hazlewood");
		rcbPlayers.add("Mahipal Lomror");
		rcbPlayers.add("Finn Allen");
		rcbPlayers.add("Sherfane Rutherford");
		rcbPlayers.add("Jason Behrendorff");
		rcbPlayers.add("Suyash Prabhudessai");
		rcbPlayers.add("Chama Milind");
		rcbPlayers.add("Aneeshwar Gautam");
		rcbPlayers.add("Karn Sharma");
		rcbPlayers.add("Siddharth Kaul");
		rcbPlayers.add("Luvnith Sisodia");
		rcbPlayers.add("David Willey");
		rcbPlayers.add("Sachin Baby");
		rcbPlayers.add("Rajat Patidar");
		rcbPlayers.add("Devdutt Padikkal");
		rcbPlayers.add("Tim David");
		rcbPlayers.add("Dan Christian");
		rcbPlayers.add("Pavan Deshpande");
		rcbPlayers.add("Daniel Sams");
		rcbPlayers.add("Washington Sundar");
		rcbPlayers.add("AB de Villiers");
		rcbPlayers.add("K. S. Bharat");
		rcbPlayers.add("Mohammed Azharuddeen");
		rcbPlayers.add("Josh Philippe");
		rcbPlayers.add("Yuzvendra Chahal");
		rcbPlayers.add("Adam Zampa");
		rcbPlayers.add("Kane Richardson");
		rcbPlayers.add("Scott Kuggeleijn");
		rcbPlayers.add("Dushmantha Chameera");
		rcbPlayers.add("Navdeep Saini");
		rcbPlayers.add("Mohammed Siraj");
		rcbPlayers.add("Kyle Jamieson");
		rcbPlayers.add("George Garton");
		rcbPlayers.add("Gurkeerat Singh");
		rcbPlayers.add("Aaron Finch");
		rcbPlayers.add("Shivam Dube");
		rcbPlayers.add("Moeen Ali");
		rcbPlayers.add("Pawan Negi");
		rcbPlayers.add("Chris Morris");
		rcbPlayers.add("Parthiv Patel");
		rcbPlayers.add("Umesh Yadav");
		rcbPlayers.add("Dale Steyn");
		rcbPlayers.add("Isuru Udana");
		rcbPlayers.add("Akshdeep Nath");
		rcbPlayers.add("Milind Kumar");
		rcbPlayers.add("Shimron Hetmyer");
		rcbPlayers.add("Himmat Singh");
		rcbPlayers.add("Marcus Stoinis");
		rcbPlayers.add("Colin de Grandhomme");
		rcbPlayers.add("Heinrich Klaasen");
		rcbPlayers.add("Kulwant Khejroliya");
		rcbPlayers.add("Prayas Ray Barman");
		rcbPlayers.add("Tim Southee");
		rcbPlayers.add("Nathan Coulter-Nile");
		rcbPlayers.add("Mandeep Singh");
		rcbPlayers.add("Manan Vohra");
		rcbPlayers.add("Brendon McCullum");
		rcbPlayers.add("Sarfaraz Khan");
		rcbPlayers.add("Chris Woakes");
		rcbPlayers.add("Corey Anderson");
		rcbPlayers.add("Aniruddha Joshi");
		rcbPlayers.add("Quinton de Kock");
		rcbPlayers.add("Murugan Ashwin");
		rcbPlayers.add("Aniket Choudhary");
		rcbPlayers.add("K L Rahul");
		rcbPlayers.add("Travis Head");
		rcbPlayers.add("Kedar Jadhav");
		rcbPlayers.add("Chris Gayle");
		rcbPlayers.add("Harpreet Singh Bhatia");
		rcbPlayers.add("Shane Watson");
		rcbPlayers.add("Stuart Binny");
		rcbPlayers.add("Vishnu Vinod");
		rcbPlayers.add("Sreenath Aravind");
		rcbPlayers.add("Avesh Khan");
		rcbPlayers.add("Adam Milne");
		rcbPlayers.add("Iqbal Abdulla");
		rcbPlayers.add("Billy Stanlake");
		rcbPlayers.add("Tymal Mills");
		rcbPlayers.add("Samuel Badree");
		rcbPlayers.add("Tabraiz Shamsi");
		rcbPlayers.add("Praveen Dubey");
		rcbPlayers.add("Abu Nechim");
		rcbPlayers.add("Chris Jordan");
		rcbPlayers.add("Mitchell Starc");
		rcbPlayers.add("Varun Aaron");
		rcbPlayers.add("Akshay Karnewar");
		rcbPlayers.add("Vikramjeet Malik");
		rcbPlayers.add("Parvez Rasool");
		rcbPlayers.add("KL Rahul");
		rcbPlayers.add("Vikas Tokas");
		rcbPlayers.add("David Wiese");
		rcbPlayers.add("Rilee Rossouw");
		rcbPlayers.add("Subramaniam Badrinath");
		rcbPlayers.add("Nic Maddinson");
		rcbPlayers.add("Vijay Zol");
		rcbPlayers.add("Shishir Bhavane");
		rcbPlayers.add("Darren Sammy");
		rcbPlayers.add("Jalaj Saxena");
		rcbPlayers.add("Yogesh Takawale");
		rcbPlayers.add("Manvinder Bisla");
		rcbPlayers.add("Ashok Dinda");
		rcbPlayers.add("Sean Abbott");
		rcbPlayers.add("Sandeep Warrier");
		rcbPlayers.add("Tanmay Mishra");
		rcbPlayers.add("Yuvraj Singh");
		rcbPlayers.add("Sachin Rana");
		rcbPlayers.add("Albie Morkel");
		rcbPlayers.add("Ravi Rampaul");
		rcbPlayers.add("Muttiah Muralitharan");
		rcbPlayers.add("Shadab Jakati");
		rcbPlayers.add("Cheteshwar Pujara");
		rcbPlayers.add("Karun Nair");
		rcbPlayers.add("Tillakaratne Dilshan");
		rcbPlayers.add("Saurabh Tiwary");
		rcbPlayers.add("Sunny Sohal");
		rcbPlayers.add("Abhinav Mukund");
		rcbPlayers.add("Mayank Agarwal");
		rcbPlayers.add("Andrew McDonald");
		rcbPlayers.add("Moisés Henriques");
		rcbPlayers.add("Daniel Vettori");
		rcbPlayers.add("Daniel Christian");
		rcbPlayers.add("Christopher Barnwell");
		rcbPlayers.add("Arun Karthik");
		rcbPlayers.add("Sheldon Jackson");
		rcbPlayers.add("KP Appanna");
		rcbPlayers.add("Vinay Kumar");
		rcbPlayers.add("Syed Mohammed");
		rcbPlayers.add("R. P. Singh");
		rcbPlayers.add("Prasanth Parameswaran");
		rcbPlayers.add("Abhimanyu Mithun");
		rcbPlayers.add("Zaheer Khan");
		rcbPlayers.add("Jaydev Unadkat");
		rcbPlayers.add("Murali Kartik");
		rcbPlayers.add("Pankaj Singh");
		rcbPlayers.add("Mohammad Kaif");
		rcbPlayers.add("Luke Pomersbach");
		rcbPlayers.add("Asad Pathan");
		rcbPlayers.add("Rajoo Bhatkal");
		rcbPlayers.add("CM Gautam");
		rcbPlayers.add("Dirk Nannes");
		rcbPlayers.add("Charl Langeveldt");
		rcbPlayers.add("Jonathan Vandiar");
		rcbPlayers.add("Johan van der Wath");
		rcbPlayers.add("Nuwan Pradeep");
		rcbPlayers.add("Rahul Dravid");
		rcbPlayers.add("Manish Pandey");
		rcbPlayers.add("Kevin Pietersen");
		rcbPlayers.add("Ross Taylor");
		rcbPlayers.add("Cameron White");
		rcbPlayers.add("Eoin Morgan");
		rcbPlayers.add("Sridharan Sriram");
		rcbPlayers.add("Steve Smith");
		rcbPlayers.add("All-rounders");
		rcbPlayers.add("Jacques Kallis");
		rcbPlayers.add("Roelof van der Merwe");
		rcbPlayers.add("Dillon du Preez");
		rcbPlayers.add("Wicket-keepers");
		rcbPlayers.add("Robin Uthappa");
		rcbPlayers.add("Mark Boucher");
		rcbPlayers.add("Shreevats Goswami");
		rcbPlayers.add("Bowlers");
		rcbPlayers.add("Anil Kumble");
		rcbPlayers.add("Praveen Kumar");
		rcbPlayers.add("Balachandra Akhil");
		rcbPlayers.add("Bhuvneshwar Kumar");

		List<String> padmashriAwardees = new ArrayList<String>();
		padmashriAwardees.add("Prahlad Rai Agarwala");
		padmashriAwardees.add("Najma Akhtar");
		padmashriAwardees.add("Sumit Antil");
		padmashriAwardees.add("T Senka Ao");
		padmashriAwardees.add("Kamalini Asthana and Nalini Asthana (Duo)");
		padmashriAwardees.add("Subbanna Ayyappan");
		padmashriAwardees.add("J K Bajaj");
		padmashriAwardees.add("Sirpi Balasubramaniam");
		padmashriAwardees.add("Srimad Baba Balia");
		padmashriAwardees.add("Sanghamitra Bandyopadhyay");
		padmashriAwardees.add("Madhuri Barthwal");
		padmashriAwardees.add("Akhone Asgar Ali Basharat");
		padmashriAwardees.add("Dr Himmatrao Bawaskar");
		padmashriAwardees.add("Harmohinder Singh Bedi");
		padmashriAwardees.add("Pramod Bhagat");
		padmashriAwardees.add("S Ballesh Bhajantri");
		padmashriAwardees.add("Khandu Wangchuk Bhutia");
		padmashriAwardees.add("Maria Christopher Byrski");
		padmashriAwardees.add("Acharya Chandanaji");
		padmashriAwardees.add("Sulochana Chavan");
		padmashriAwardees.add("Neeraj Chopra");
		padmashriAwardees.add("Shakuntala Choudhary");
		padmashriAwardees.add("Sankaranarayana Menon Chundayil");
		padmashriAwardees.add("S Damodaran");
		padmashriAwardees.add("Faisal Ali Dar");
		padmashriAwardees.add("Jagjit Singh Dardi");
		padmashriAwardees.add("Dr Prokar Dasgupta");
		padmashriAwardees.add("Aditya Prasad Dash");
		padmashriAwardees.add("Dr Lata Desai");
		padmashriAwardees.add("Malji Bhai Desai");
		padmashriAwardees.add("Basanti Devi");
		padmashriAwardees.add("Lourembam Bino Devi");
		padmashriAwardees.add("Muktamani Devi");
		padmashriAwardees.add("Shyamamani Devi");
		padmashriAwardees.add("Khalil Dhantejvi (Posthumous)");
		padmashriAwardees.add("Savaji Bhai Dholakia");
		padmashriAwardees.add("Arjun Singh Dhurve");
		padmashriAwardees.add("Vijaykumar Vinayak Dongre");
		padmashriAwardees.add("Chandraprakash Dwivedi");
		padmashriAwardees.add("Dhaneswar Engti");
		padmashriAwardees.add("Om Prakash Gandhi");
		padmashriAwardees.add("Narasimha Rao Garikapati");
		padmashriAwardees.add("Girdhari Ram Gonjhu (Posthumous)");
		padmashriAwardees.add("Shaibal Gupta(Posthumous)");
		padmashriAwardees.add("Narasingha Prasad Guru");
		padmashriAwardees.add("Gosaveedu Shaik Hassan");
		padmashriAwardees.add("Ryuko Hira");
		padmashriAwardees.add("Sosamma Iype");
		padmashriAwardees.add("Avadh Kishore Jadia");
		padmashriAwardees.add("Sowcar Janaki");
		padmashriAwardees.add("Tara Jauhar");
		padmashriAwardees.add("Vandana Kataria");
		padmashriAwardees.add("H R Keshavamurthy");
		padmashriAwardees.add("Rutger Kortenhorst");
		padmashriAwardees.add("P Narayana Kurup");
		padmashriAwardees.add("Avani Lekhara");
		padmashriAwardees.add("Moti Lal Madan");
		padmashriAwardees.add("Shivnath Mishra");
		padmashriAwardees.add("Dr Narendra Prasad Misra");
		padmashriAwardees.add("Darshanam Mogilaiah");
		padmashriAwardees.add("Guruprasad Mohapatra");
		padmashriAwardees.add("Thavil Kongampattu A V Murugaiyan");
		padmashriAwardees.add("R Muthukannammal");
		padmashriAwardees.add("Abdul Khader Nadakattin");
		padmashriAwardees.add("Amai Mahalinga Naik");
		padmashriAwardees.add("Tsering Namgyal");
		padmashriAwardees.add("A K C Natarajan");
		padmashriAwardees.add("V L Nghaka");
		padmashriAwardees.add("Sonu Nigam");
		padmashriAwardees.add("Ram Sahay Panday");
		padmashriAwardees.add("Chirapat Prapandavidya");
		padmashriAwardees.add("K V Rabiya");
		padmashriAwardees.add("Anil K. Rajvanshi");
		padmashriAwardees.add("Sheesh Ram");
		padmashriAwardees.add("Ramachandraiah");
		padmashriAwardees.add("Dr Sunkara Venkata Adinarayana Rao");
		padmashriAwardees.add("Gamit Ramilaben Raysingbhai");
		padmashriAwardees.add("Padmaja Reddy");
		padmashriAwardees.add("Guru Tulku Rinpoche");
		padmashriAwardees.add("Brahmanand Sankhwalkar");
		padmashriAwardees.add("Vidyanand Sarek");
		padmashriAwardees.add("Kali Pada Saren");
		padmashriAwardees.add("Dr Veeraswamy Seshiah");
		padmashriAwardees.add("Prabhaben Shah");
		padmashriAwardees.add("Dilip Shahani");
		padmashriAwardees.add("Ram Dayal Sharma");
		padmashriAwardees.add("Vishwamurti Shastri");
		padmashriAwardees.add("Tatiana Lvovna Shaumyan");
		padmashriAwardees.add("Siddhalingaiah (Posthumous)");
		padmashriAwardees.add("Kaajee Singh");
		padmashriAwardees.add("Konsam Ibomcha Singh");
		padmashriAwardees.add("Prem Singh");
		padmashriAwardees.add("Seth Pal Singh");
		padmashriAwardees.add("Vidya Vindu Singh");
		padmashriAwardees.add("Baba Iqbal Singh Ji");
		padmashriAwardees.add("Dr Bhimsen Singhal");
		padmashriAwardees.add("Sivananda");
		padmashriAwardees.add("Ajay Kumar Sonkar");
		padmashriAwardees.add("Ajita Srivastava");
		padmashriAwardees.add("Sadguru Brahmeshanand Acharya Swami");
		padmashriAwardees.add("Dr Balaji Tambe (Posthumous)");
		padmashriAwardees.add("Raghuvendra Tanwar");
		padmashriAwardees.add("Kamlakar Tripathi");
		padmashriAwardees.add("Lalita Vakil");
		padmashriAwardees.add("Durga Bai Vyom");
		padmashriAwardees.add("Jyantkumar Maganlal Vyas");
		padmashriAwardees.add("Badaplin War");

		List<Integer> friendsAge = new ArrayList<Integer>();
		friendsAge.add(23);
		friendsAge.add(25);
		friendsAge.add(22);
		friendsAge.add(22);
		friendsAge.add(22);
		friendsAge.add(24);
		friendsAge.add(25);
		friendsAge.add(23);
		friendsAge.add(22);
		friendsAge.add(25);
		friendsAge.add(22);
		friendsAge.add(25);
		friendsAge.add(24);
		friendsAge.add(26);
		friendsAge.add(25);
		friendsAge.add(25);
		friendsAge.add(24);
		friendsAge.add(23);
		friendsAge.add(23);
		friendsAge.add(28);
		friendsAge.add(25);
		friendsAge.add(23);
		friendsAge.add(24);

		System.out.println("================country name end with a==============");
		Predicate<String> predicate = (String) -> {
			return String.endsWith("a");
		};
		List<String> temp = country.stream().filter(predicate).collect(Collectors.toList());
		Comparator<String> comp = (a1, a2) -> {
			return a2.compareTo(a1);
		};
		Collections.sort(temp, comp);
		for (String string : temp) {
			System.out.println(string);
		}
		System.out.println("================primeminister name starting with N==============");
		Predicate<String> predicate1 = (String) -> {
			return String.startsWith("N");
		};
		List<String> temp1 = primeMinister.stream().filter(predicate1).collect(Collectors.toList());
		Comparator<String> comp1 = (a1, a2) -> {
			return a2.compareTo(a1);
		};
		Collections.sort(temp1, comp1);
		for (String string : temp1) {
			System.out.println(string);
		}

		System.out.println("================actors name contains with ma==============");
		Predicate<String> predicate2 = (String) -> {
			return String.contains("ma");
		};
		List<String> temp2 = actors.stream().filter(predicate2).collect(Collectors.toList());
		Comparator<String> comp2 = (a1, a2) -> {
			return a2.compareTo(a1);
		};
		Collections.sort(temp2, comp2);
		for (String string : temp2) {
			System.out.println(string);
		}

		System.out.println("================actors name not contains with Ra==============");
		Predicate<String> predicate3 = (String) -> {
			return !String.contains("Ra");
		};
		List<String> temp3 = actors.stream().filter(predicate3).collect(Collectors.toList());
		Comparator<String> comp3 = (a1, a2) -> {
			return a2.compareTo(a1);
		};
		Collections.sort(temp3, comp3);
		for (String string : temp3) {
			System.out.println(string);
		}

		System.out.println("================cricketers name not contains with S==============");
		Predicate<String> predicate4 = (String) -> {
			return !String.contains("S");
		};
		List<String> temp4 = rcbPlayers.stream().filter(predicate4).collect(Collectors.toList());
		Comparator<String> comp4 = (a1, a2) -> {
			return a2.compareTo(a1);
		};
		Collections.sort(temp4, comp4);
		for (String string : temp4) {
			System.out.println(string);
		}

		System.out.println("================cricketers name not contains with D==============");
		Predicate<String> predicate5 = (String) -> {
			return !String.contains("D");
		};
		List<String> temp5 = rcbPlayers.stream().filter(predicate5).collect(Collectors.toList());
		Comparator<String> comp5 = (a1, a2) -> {
			return a2.compareTo(a1);
		};
		Collections.sort(temp5, comp5);
		for (String string : temp5) {
			System.out.println(string);
		}

		System.out.println("================Age greater than 20==============");

		List<Integer> temp6 = friendsAge.stream().filter(i -> i > 20).collect(Collectors.toList());
		Comparator<Integer> comp6 = (a1, a2) -> {
			return a2.compareTo(a1);
		};
		Collections.sort(temp6, comp6);
		for (Integer integer : temp6) {
			System.out.println(integer);
		}

		System.out.println("================Age greater than 22 and less than 30==============");

		List<Integer> temp7 = friendsAge.stream().filter(i -> i > 22 && i < 30).collect(Collectors.toList());
		Comparator<Integer> comp7 = (a1, a2) -> {
			return a2.compareTo(a1);
		};
		Collections.sort(temp7, comp7);
		for (Integer integer : temp7) {
			System.out.println(integer);
		}
	}
}
